'''Add optics groups to particle starfile'''

from __future__ import unicode_literals
from __future__ import print_function, division, absolute_import

import os
import sys
import argparse
import pandas as pd


def read_data_block_as_dataframe(f, block_name):
    if block_name is None:
        # Assumes f is at the block_name line
        pass
    else:
        # Read up to the block_name line
        for line in f:
            line = line.strip()
            if line.startswith(block_name):
                break

    # Read up to loop_
    for line in f:
        if line.startswith('loop_'):
            break

    # Read metadata labels
    metadata_labels = []
    for line in f:
        line = line.strip()
        if line.startswith('_rln'):
            metadata_labels.append(line.split()[0])
        else:
            break

    # Read metadata
    metadata = []
    # The current line is the first metadata record
    words = line.split()
    assert len(metadata_labels) == len(words)
    metadata.append(words)
    for line in f:
        line = line.strip()
        if line == '':
            # Empty line, the end of the metadata block
            break
        words = line.split()
        assert len(metadata_labels) == len(words)
        metadata.append(words)

    # Convert to DataFrame
    metadata_df = pd.DataFrame(metadata, columns=metadata_labels)

    return metadata_df


def read_input_star(input_star):
    assert os.path.exists(input_star)
    with open(input_star, 'r') as f:
        # Determine metadata table version
        for line in f:
            line = line.strip()
            if line == '':
                # Empty line
                continue
            elif line.startswith('# version'):
                # Version string introduced in v3.1
                input_star_version = int(line.split()[-1])
                break
            elif line.startswith('data_'):
                # No version string, thus <= v3.0
                #  Assumes v3.0
                input_star_version = 30000
                break
            else:
                sys.exit('Invalid input star file.')

        if input_star_version > 30000:
            df_optics_in = read_data_block_as_dataframe(f, 'data_optics')
            assert df_optics_in.shape[0] == 1, 'More than two opticsGroups exists in the file.'
            df_particles_in = read_data_block_as_dataframe(f, 'data_particles')
        else:
            df_optics_in = None
            df_particles_in = read_data_block_as_dataframe(f, None)

    return input_star_version, df_particles_in, df_optics_in


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description=__doc__
    )
    parser.add_argument('--input_star', required=True, help='Input particle starfile.')
    parser.add_argument('--output_star', required=True, help='Output particle starfile.')
    parser.add_argument('--optics_group_csv', required=True, help='CSV file generated by roga_find_optics_groups.py')
    args = parser.parse_args()

    print('##### Command #####\n\t' + ' '.join(sys.argv))
    args_print_str = '##### Input parameters #####\n'
    for opt, val in vars(args).items():
        args_print_str += '\t{} : {}\n'.format(opt, val)
    print(args_print_str)
    return args


if __name__ == '__main__':
    args = parse_args()

    input_star_version, df_particles_in, df_optics_in = read_input_star(args.input_star)

    print('finished')
